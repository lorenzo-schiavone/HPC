{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 solve equation he showed\
\
write a program with openmp directive to solve the equation\
\
read the nodal coordinate and element boundary condition, boundary dirichlet and neumann\
\
assembly of all the matrix -> openmp \
\
to put all local matrix together pay attention\
\
solved the arising problem -> gmres or bicgstab (in openmp) to solve linear system and finite differences in time (implicit euler or crank nicolson)\
\
parallel matrix vector product \
parallel dot product\
parallel vector update\
\
jacobi preconditioner in parallel as preconditioned (if something more ask him: fsai)\
\
\
finally: short report on speedup increasing on the number of thread. are you able to improve performance?\
\
step:\
- solver Ax=b\
- computational grids -> read element connectivity\
- implement velocity field and see what happen solving the system\
\
}